import os
import random
import asyncio
import yt_dlp
import discord
import io
import requests
from discord.ext import commands
from replit import db

intents = discord.Intents.default()
intents.guilds = True
intents.messages = True
intents.voice_states = True
intents.message_content = True
#intents.direct_message_reactions = True

bot = commands.Bot(command_prefix='!', intents=intents)

class VolumeTransformer(discord.PCMVolumeTransformer):
    def cleanup(self):
        try:
            self.original.cleanup()
        except AttributeError:
            pass

@bot.event
async def on_ready():
    print('Bot is ready.')

@bot.command()
async def play(ctx, url):
    voice_channel = ctx.author.voice.channel
    if voice_channel is None:
        await ctx.send("You need to be in a voice channel to use this command.")
        return

    permissions = voice_channel.permissions_for(ctx.me)
    if not permissions.connect or not permissions.speak:
        await ctx.send("I don't have permission to join or speak in that voice channel.")
        return

    try:
        voice_client = await voice_channel.connect()
    except Exception as e:
        await ctx.send(f"Error connecting to voice channel: {str(e)}")
        return

    ydl_opts = {'format': 'bestaudio/best', 'noplaylist': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        if info is None:
            await ctx.send('Invalid URL provided, please try again!')

        song = {
            'title': info['title'],
            'url': info['url'],
        }

        ffmpeg_options = {
            'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
            'options': '-vn',
        }

        source = discord.FFmpegOpusAudio(executable="ffmpeg", source=song['url'], **ffmpeg_options)
        voice_client.source = VolumeTransformer(source, volume=0.5)

        voice_client.play(voice_client.source)
        await ctx.send(f"Now playing: {song['title']}")

        while voice_client.is_playing():
            await asyncio.sleep(1)

        await voice_client.disconnect()

@bot.command()
async def volume(ctx, volume: int):
    voice_client = ctx.voice_client
    if voice_client is None:
        await ctx.send("I am not connected to a voice channel.")
        return

    if volume < 0 or volume > 100:
        await ctx.send("Volume must be between 0 and 100.")
        return

    voice_client.source.volume = volume / 100
    await ctx.send(f"Volume set to {volume}%")

@bot.command()
async def stop(ctx):
    voice_channel = ctx.author.voice.channel
    if voice_channel is None:
        await ctx.send("You need to be in a voice channel to use this command.")
        return
    await voice_channel.disconnect()

@bot.command()
async def random_song(ctx):
    songs = db['songs']
    song = random.choice(songs)
    await play(ctx, song)

@play.error
async def play_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("Please provide a valid YouTube URL.")

@volume.error
async def volume_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("Please provide a volume value between 0 and 100.")

bot.run(os.environ['GK_Token'])
